# 文件路径：.github/workflows/windows-mingw.yml

name: Windows MinGW Qt Build & Release

on:
  push:
    paths:
      - '*.pro'
      - 'src/**'
      - '.github/workflows/windows-mingw.yml'
  pull_request:
    paths:
      - '*.pro'
      - 'src/**'
      - '.github/workflows/windows-mingw.yml'

jobs:
  build:
    name: Build Qt Project with MinGW
    runs-on: windows-2019

    strategy:
      matrix:
        include:
          - qt_arch: win64_mingw73
            qt_ver: 5.14.2
            qt_tools: tools_mingw
            qt_tools_mingw_install: mingw730_6

    env:
      targetName: HelloActions-Qt.exe  # 最终生成的可执行文件名

    steps:
      # 1. 拉取源码
      - name: Checkout source code
        uses: actions/checkout@v2
        with:
          fetch-depth: 1

      # 2. 安装 Qt
      - name: Install Qt ${{ matrix.qt_ver }} with MinGW
        uses: jurplel/install-qt-action@v3
        with:
          version: ${{ matrix.qt_ver }}
          aqtversion: '==3.1.*'
          arch: ${{ matrix.qt_arch }}
          tools: ${{ matrix.qt_tools }}
          host: windows
          target: desktop

      # 3. 配置 Qt5 环境变量
      - name: Configure Qt 5 environment variables
        if: startsWith(matrix.qt_ver, '5')
        shell: pwsh
        run: |
          Write-Output "${{ env.Qt5_DIR }}/bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          Write-Output "${{ env.Qt5_DIR }}/../../Tools/${{ matrix.qt_tools_mingw_install }}/bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      # 4. 查看 qmake 和 mingw32-make 路径，方便调试
      - name: Show qmake and mingw32-make path
        shell: pwsh
        run: |
          Get-Command qmake | Format-List
          Get-Command mingw32-make | Format-List

      # 5. 编译项目
      - name: Build with qmake and mingw32-make
        shell: cmd
        run: |
          qmake
          mingw32-make

      # 6. 打包，内联 PowerShell 脚本执行
      - name: Package build output
        id: package
        env:
          archiveName: ${{ matrix.qt_ver }}-${{ matrix.qt_arch }}
          targetName: ${{ env.targetName }}
        shell: pwsh
        run: |
          # 清理旧的打包目录
          if (Test-Path $env:archiveName) {
            Remove-Item -Recurse -Force $env:archiveName
          }

          # 创建新目录
          New-Item -ItemType Directory -Path $env:archiveName

          # 拷贝可执行文件
          Copy-Item -Path "bin\release\$env:targetName" -Destination $env:archiveName

          # 复制 Qt 依赖
          windeployqt --qmldir . --plugindir "$env:archiveName\plugins" --no-translations --compiler-runtime "$env:archiveName\$env:targetName"

          # 删除无用文件
          $excludeList = @("*.qmlc", "*.ilk", "*.exp", "*.lib", "*.pdb")
          foreach ($pattern in $excludeList) {
            Get-ChildItem -Path $env:archiveName -Filter $pattern -Recurse | Remove-Item -Force
          }

          # 压缩为 zip 文件
          Compress-Archive -Path $env:archiveName -DestinationPath "$($env:archiveName).zip"

          # 输出包名，供后续步骤使用
          echo "packageName=$($env:archiveName)" >> $GITHUB_OUTPUT

      # 7. 上传构建产物
      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.package.outputs.packageName }}
          path: ${{ steps.package.outputs.packageName }}.zip

      # 8. Tag 推送时自动创建 Release 并上传 zip 包
      - name: Create GitHub Release and upload artifact
        if: startsWith(github.ref, 'refs/tags/')
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{ steps.package.outputs.packageName }}.zip
          asset_name: ${{ steps.package.outputs.packageName }}.zip
          tag: ${{ github.ref }}
          overwrite: true
