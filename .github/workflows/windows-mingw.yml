name: Windows MinGW Qt Build & Release

on:
  push:
    paths:
      - '*.pro'
      - 'src/**'
      - '.github/workflows/windows-mingw.yml'
  pull_request:
    paths:
      - '*.pro'
      - 'src/**'
      - '.github/workflows/windows-mingw.yml'

jobs:
  build:
    name: Build Qt Project with MinGW
    runs-on: windows-2019

    strategy:
      matrix:
        include:
          - qt_arch: win64_mingw73
            qt_ver: 5.14.2
            qt_tools: tools_mingw
            qt_tools_mingw_install: mingw730_6

    env:
      targetName: HelloActions-Qt.exe

    steps:
      - name: Checkout source code
        uses: actions/checkout@v2

      - name: Install Qt ${{ matrix.qt_ver }} with MinGW
        uses: jurplel/install-qt-action@v3
        with:
          version: ${{ matrix.qt_ver }}
          aqtversion: '==3.1.*'
          arch: ${{ matrix.qt_arch }}
          tools: ${{ matrix.qt_tools }}
          host: windows
          target: desktop

      - name: Configure Qt 5 environment variables
        if: startsWith(matrix.qt_ver, '5')
        shell: pwsh
        run: |
          Write-Output "${{ env.Qt5_DIR }}/bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          Write-Output "${{ env.Qt5_DIR }}/../../Tools/${{ matrix.qt_tools_mingw_install }}/bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: Show qmake and mingw32-make path
        shell: pwsh
        run: |
          Get-Command qmake | Format-List
          Get-Command mingw32-make | Format-List

      - name: Build with qmake and mingw32-make
        shell: cmd
        run: |
          qmake
          mingw32-make

      - name: Package build output
        id: package
        env:
          archiveName: ${{ matrix.qt_ver }}-${{ matrix.qt_arch }}
          targetName: ${{ env.targetName }}
        shell: pwsh
        run: |
          if (Test-Path $env:archiveName) { Remove-Item -Recurse -Force $env:archiveName }
          New-Item -ItemType Directory -Path $env:archiveName
          Copy-Item -Path "bin\release\$env:targetName" -Destination $env:archiveName
          windeployqt --qmldir . --plugindir "$env:archiveName\plugins" --no-translations --compiler-runtime "$env:archiveName\$env:targetName"
          $excludeList = @("*.qmlc", "*.ilk", "*.exp", "*.lib", "*.pdb")
          foreach ($pattern in $excludeList) {
            Get-ChildItem -Path $env:archiveName -Filter $pattern -Recurse | Remove-Item -Force
          }
          Compress-Archive -Path $env:archiveName -DestinationPath "$($env:archiveName).zip"
          echo "packageName=$($env:archiveName)" >> $GITHUB_OUTPUT

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.package.outputs.packageName }}
          path: ${{ steps.package.outputs.packageName }}.zip

      - name: Create and push tag
        id: tag
        if: success()
        env:
          PAT_TOKEN: ${{ secrets.PAT_TOKEN }}
        shell: bash
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          TAG_NAME="v$(date +'%Y%m%d-%H%M')"
          git tag "$TAG_NAME"
          git remote set-url origin "https://x-access-token:${PAT_TOKEN}@github.com/${{ github.repository }}"
          git push origin "$TAG_NAME"
          echo "tag=$TAG_NAME" >> "$GITHUB_OUTPUT"


      - name: Create GitHub Release and upload artifact
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.PAT_TOKEN }}
          file: ${{ steps.package.outputs.packageName }}.zip
          asset_name: ${{ steps.package.outputs.packageName }}.zip
          tag: ${{ steps.tag.outputs.tag }}
          overwrite: true