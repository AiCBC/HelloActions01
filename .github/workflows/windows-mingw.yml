name: Windows MinGW  # 工作流名称
on: 
  push:
    paths:
      - '*.pro'                # 只有当 .pro 文件变动时触发
      - 'src/**'               # src 目录下任意文件变动时触发
      - '.github/workflows/windows-mingw.yml'  # 当前 workflow 文件修改时触发
  pull_request:
    paths:
      - '*.pro'                # PR 修改 .pro 文件时触发
      - 'src/**'               # PR 修改 src 目录时触发
      - '.github/workflows/windows-mingw.yml'  # PR 修改 workflow 文件时触发

jobs:
  build:
    name: Build               # 任务名称
    runs-on: windows-2022    # 运行环境是 Windows Server 2019

    strategy:
      matrix:                 # 矩阵策略，定义多组编译参数，做多版本多架构的测试
        include:
          - qt_arch: win64_mingw73
            qt_ver: 5.14.2
            qt_tools: "tools_mingw,7.3.0-1-202004170606"
            qt_tools_mingw_install: mingw730_64

    env:
      targetName: HelloActions-Qt.exe    # 目标可执行文件名

    steps:
      - name: Setup Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: '3.12.10'
      - name: Install Qt             # 安装 Qt 及对应工具链
        uses: jurplel/install-qt-action@v4
        with:
            version: ${{ matrix.qt_ver }}           # Qt版本号
            host: windows                           # 主机系统
            target: desktop                         # 构建目标（桌面）
            arch: ${{ matrix.qt_arch }}             # 架构（如 win64_mingw73）
            tools: ${{ matrix.qt_tools }}           # 工具包
            setup-python: 'false'
            cache: false                            # 禁用缓存

      - uses: actions/checkout@v2      # 拉取代码，fetch-depth 1表示只拉最新提交
        with:
          fetch-depth: 1
          

      - name: Qt 5 environment configuration   # Qt5 环境变量配置
        if: ${{ startsWith( matrix.qt_ver, 5 ) }}   # 只有 Qt5 版本才执行
        shell: pwsh
        run: |
          # 将 Qt5 的 bin 目录加入 PATH
          Write-Output "${{ env.Qt5_DIR }}/bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          # 将 mingw 工具链的 bin 目录加入 PATH
          Write-Output "${{ env.Qt5_DIR }}/../../Tools/${{ matrix.qt_tools_mingw_install }}/bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: Qt 6 environment configuration   # Qt6 环境变量配置
        if: ${{ startsWith( matrix.qt_ver, 6 ) }}   # 只有 Qt6 版本才执行
        shell: pwsh
        run: |
          # 将 Qt6 的 bin 目录加入 PATH
          Write-Output "${{ env.Qt6_DIR }}/bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          # 将 mingw 工具链的 bin 目录加入 PATH
          Write-Output "${{ env.Qt6_DIR }}/../../Tools/${{ matrix.qt_tools_mingw_install }}/bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: where is qmake & where is mingw32-make  # 查看 qmake 和 mingw32-make 工具路径，验证环境配置是否正确
        shell: pwsh
        run: |
          Get-Command -Name 'qmake' | Format-List
          Get-Command -Name 'mingw32-make' | Format-List

      - name: mingw-build              # 编译项目步骤，使用 cmd shell
        id: build
        shell: cmd
        run: |
          qmake                  # 运行 qmake 生成 Makefile
          mingw32-make           # 使用 mingw32-make 编译项目

      - name: package                 # 打包步骤，调用自定义 PowerShell 脚本进行打包
        id: package      
        env:
          archiveName: ${{ matrix.qt_ver }}-${{ matrix.qt_target }}-${{ matrix.qt_arch }}   # 打包文件名变量
        shell: pwsh
        run: |
          # 调用脚本传入打包文件名和目标可执行文件名
          & scripts\windows-mingw-publish.ps1 ${env:archiveName} ${env:targetName}
          $name = ${env:archiveName}
          # 设置输出变量 packageName，供后续步骤使用
          echo "::set-output name=packageName::$name"       

      - uses: actions/upload-artifact@v4      # 上传打包产物作为构建工件
        with:
          name: ${{ steps.package.outputs.packageName }}
          path: ${{ steps.package.outputs.packageName }}

      - name: uploadRelease                # 如果触发的是 tag，上传构建产物到 GitHub Release
        if: startsWith(github.event.ref, 'refs/tags/')
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}                 # GitHub token 用于授权
          file: ${{ steps.package.outputs.packageName }}.zip       # 上传的文件
          asset_name: ${{ steps.package.outputs.packageName }}.zip # Release 中显示的文件名
          tag: ${{ github.ref }}                                    # 关联的 tag
          overwrite: true                                          # 如果有同名，覆盖上传
